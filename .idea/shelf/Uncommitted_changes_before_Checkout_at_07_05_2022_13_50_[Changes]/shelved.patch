Index: Project/src/test/java/BusinessLayer/Shops/ShopTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BusinessLayer.Shops;\r\n\r\nimport BusinessLayer.Products.Product;\r\nimport BusinessLayer.Users.*;\r\nimport org.junit.Assert;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.internal.runners.statements.Fail;\r\n\r\nimport javax.naming.NoPermissionException;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\nimport static org.junit.Assert.fail;\r\n\r\npublic class ShopTest {\r\n\r\n    private final SubscribedUser founder = createFounder();\r\n    private Shop s1;\r\n    private Product p1;\r\n    private Product p2;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        s1 = createShop();\r\n        p1 = createProduct();\r\n        p2 = createDifferentProduct();\r\n    }\r\n\r\n    @Test\r\n    public void addProduct() {\r\n        Shop s1 = createShopWithProduct();\r\n        Assert.assertEquals(1, s1.getProducts().size());\r\n        try {\r\n            s1.addProduct(p1);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Assert.assertEquals(1, s1.getProducts().size());\r\n        }\r\n    }\r\n\r\n\r\n    @Test\r\n    public void removeProductSuccess() throws IllegalStateException {\r\n        Shop s1 = createShopWithProduct();\r\n        s1.removeProduct(p1.getID());\r\n        Assert.assertEquals(0, s1.getProducts().size());\r\n    }\r\n    @Test\r\n    public void removeWrongProduct() throws IllegalStateException {\r\n        Shop s1 = createShopWithProduct();\r\n        try {\r\n            s1.removeProduct(p2.getID());\r\n        } catch (Exception e) {\r\n            Assert.assertEquals(1, s1.getProducts().size());\r\n        }\r\n    }\r\n    @Test\r\n    public void searchProducts() {\r\n        Shop s = createShopWithTwoProducts();\r\n        //TODO: Yuval u didnt write test;\r\n    }\r\n\r\n    @Test\r\n    public void purchaseBasketSuccess() {\r\n        Assert.assertNotEquals(purchaseBasketHelper(10), 0.0, 0.0);\r\n    }\r\n    @Test\r\n    public void purchaseBasketFail() {\r\n        try {\r\n            purchaseBasketHelper(1000);\r\n            fail(\"the product is out of stock shouldn't work\");\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Assert.assertTrue(1000>s1.getProducts().get(p1.getID()).getQuantity());\r\n        }\r\n    }\r\n\r\n    private double purchaseBasketHelper(int quantity) throws IllegalStateException {\r\n        Shop s1 = createShopWithProduct();\r\n        User u1 = new Guest(\"Yuval\");\r\n        u1.saveProducts(s1.getId(), p1.getID(), quantity);\r\n        s1.addBasket(u1.getName(), u1.getBasket(s1.getId()));\r\n        return s1.purchaseBasket(u1.getName());\r\n    }\r\n    @Test\r\n    public void changeProductFail() {\r\n        Shop s1 = createShopWithProduct();\r\n        Product p2 = createDifferentProduct();\r\n        try {\r\n            s1.changeProduct(p2);\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            Assert.assertNull(s1.getProducts().get(p2.getID()));\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void changeProductSuccess() {\r\n        Shop s1 = createShopWithProduct();\r\n        Product p2 = createChangedProduct();\r\n        s1.changeProduct(p2);\r\n        Assert.assertEquals(getProductFromShop(s1, p2.getID()).getName(), p2.getName());\r\n        Assert.assertEquals(getProductFromShop(s1, p2.getID()).getPrice(), p2.getPrice(), 0.0);\r\n        Assert.assertEquals(getProductFromShop(s1, p2.getID()).getQuantity(), p2.getQuantity());\r\n    }\r\n\r\n\r\n    private Shop createShopWithProduct() throws IllegalStateException {\r\n        s1.addProduct(p1);\r\n        return s1;\r\n    }\r\n\r\n    private Shop createShopWithTwoProducts() throws IllegalStateException {\r\n        s1.addProduct(p1);\r\n        s1.addProduct(p2);\r\n        return s1;\r\n    }\r\n\r\n    private Shop createShop() {\r\n        return new Shop(100, \"shop\", founder);\r\n    }\r\n\r\n    private Product createProduct() {\r\n        return new Product(1, \"a\", 5, 100);\r\n    }\r\n\r\n    private Product createChangedProduct() {\r\n        return new Product(1, \"b\", 10, 10);\r\n    }\r\n\r\n    private Product createDifferentProduct() {\r\n        return new Product(2, \"c\", 15, 500);\r\n    }\r\n\r\n    private Product getProductFromShop(Shop s1, int id) {\r\n        return s1.getProducts().get(id);\r\n    }\r\n\r\n    private User createUserWithItemInBasket(int shopid, int productid, int quantity)\r\n    {\r\n        User u = new Guest(\"Yuval\");\r\n        u.saveProducts(shopid, productid, quantity);\r\n        return u;\r\n    }\r\n\r\n    private SubscribedUser createFounder() {\r\n        return new SubscribedUser(\"Founder Guy\",\"Guy123456\");\r\n    }\r\n}\r\n
===================================================================
diff --git a/Project/src/test/java/BusinessLayer/Shops/ShopTest.java b/Project/src/test/java/BusinessLayer/Shops/ShopTest.java
--- a/Project/src/test/java/BusinessLayer/Shops/ShopTest.java	
+++ b/Project/src/test/java/BusinessLayer/Shops/ShopTest.java	
@@ -14,7 +14,7 @@
 
 public class ShopTest {
 
-    private final SubscribedUser founder = createFounder();
+    private final BusinessLayer.Users.SubscribedUser founder = createFounder();
     private Shop s1;
     private Product p1;
     private Product p2;
