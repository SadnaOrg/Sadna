Index: Sadna.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule=\"true\" type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_17\">\r\n    <output url=\"file://$MODULE_DIR$/target/classes\" />\r\n    <output-test url=\"file://$MODULE_DIR$/target/test-classes\" />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Project/Tests\" isTestSource=\"true\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Project/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/resources\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"true\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/target\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module-library\" scope=\"TEST\">\r\n      <library name=\"JUnit4\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"module-library\" scope=\"TEST\">\r\n      <library name=\"JUnit4\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"module-library\" scope=\"TEST\">\r\n      <library name=\"JUnit5.7.0\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.mockito:mockito-core:4.5.1\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.bytebuddy:byte-buddy:1.12.9\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: net.bytebuddy:byte-buddy-agent:1.12.9\" level=\"project\" />\r\n    <orderEntry type=\"library\" scope=\"TEST\" name=\"Maven: org.objenesis:objenesis:3.2\" level=\"project\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sadna.iml b/Sadna.iml
--- a/Sadna.iml	
+++ b/Sadna.iml	
@@ -1,57 +1,22 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_17">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_16">
     <output url="file://$MODULE_DIR$/target/classes" />
     <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/Project/Tests" isTestSource="true" />
-      <sourceFolder url="file://$MODULE_DIR$/Project/src" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Project/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/Project/src/test/java" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module-library" scope="TEST">
-      <library name="JUnit4">
-        <CLASSES>
-          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library" scope="TEST">
-      <library name="JUnit4">
-        <CLASSES>
-          <root url="jar://$MAVEN_REPOSITORY$/junit/junit/4.13.1/junit-4.13.1.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
-    <orderEntry type="module-library" scope="TEST">
-      <library name="JUnit5.7.0">
-        <CLASSES>
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.7.0/junit-jupiter-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.7.0/junit-jupiter-api-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.1.0/apiguardian-api-1.1.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.2.0/opentest4j-1.2.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.7.0/junit-platform-commons-1.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.7.0/junit-jupiter-params-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.7.0/junit-jupiter-engine-5.7.0.jar!/" />
-          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.7.0/junit-platform-engine-1.7.0.jar!/" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-      </library>
-    </orderEntry>
     <orderEntry type="library" scope="TEST" name="Maven: org.mockito:mockito-core:4.5.1" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: net.bytebuddy:byte-buddy:1.12.9" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: net.bytebuddy:byte-buddy-agent:1.12.9" level="project" />
     <orderEntry type="library" scope="TEST" name="Maven: org.objenesis:objenesis:3.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.13.1" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: Project/src/test/java/BusinessLayer/Shops/ShopControllerUnitTests.java
===================================================================
diff --git a/Project/src/test/java/BusinessLayer/Shops/ShopControllerUnitTests.java b/Project/src/test/java/BusinessLayer/Shops/ShopControllerUnitTests.java
new file mode 100644
--- /dev/null	
+++ b/Project/src/test/java/BusinessLayer/Shops/ShopControllerUnitTests.java	
@@ -0,0 +1,110 @@
+package BusinessLayer.Shops;
+import BusinessLayer.Users.Basket;
+import org.junit.*;
+import org.mockito.Mock;
+import org.mockito.junit.MockitoJUnit;
+import org.mockito.junit.MockitoRule;
+
+import java.util.Random;
+import java.util.concurrent.ConcurrentHashMap;
+
+import static org.mockito.Mockito.*;
+
+public class ShopControllerUnitTests {
+
+    @Mock
+    private Shop s1;
+
+    private Random rand = new Random();
+    private int randID = rand.nextInt(1000);
+
+    @Mock
+    private Basket basket;
+
+    private String userName = "Yuval" + rand.nextInt(1000);
+
+    //@Mock
+    //private User u1;
+
+    //@Mock
+    //private PurchaseHistory p1;
+
+    //@Mock
+    //private PurchaseHistoryController pc;
+
+    //@Mock
+    //private UserController uc;
+
+    @Rule public MockitoRule rule = MockitoJUnit.rule();
+
+    private ShopController sc = ShopController.getInstance();
+
+    @Before
+    public void setUp(){
+        when(s1.getId()).thenReturn(randID);
+        sc.addShop(s1);
+    }
+
+    @After
+    public void shopReset() {
+        sc.getShops().remove(s1.getId());
+    }
+
+    @Test
+    public void addShop() {
+        int old_size = sc.getShops().size();
+        Shop s2 = mock(Shop.class);
+        when(s2.getId()).thenReturn(rand.nextInt(1000));
+        Assert.assertTrue(sc.addShop(s2));
+        verify(s1, atLeast(1)).getId();
+        Assert.assertTrue(sc.getShops().size() - old_size > 0);
+    }
+
+    @Test
+    public void addBasket() {
+        when(s1.addBasket(userName, basket)).thenReturn(true);
+        Assert.assertEquals(sc.AddBasket(s1.getId(), userName, basket), true);
+        verify(s1).addBasket(userName, basket);
+    }
+
+    @Test
+    public void searchProducts() {
+    }
+
+    @Test
+    public void purchaseBasket() {
+        //when(s1.purchaseBasket(userName)).thenReturn(10.0);
+        //ConcurrentHashMap<Integer, Double> res = new ConcurrentHashMap<>();
+        //res.put(s1.getId(), 10.0);
+        //addBasket();
+        //Assert.assertEquals(sc.purchaseBasket(userName), res);
+        //verify(s1).purchaseBasket(userName);
+    }
+
+    @Test
+    public void addToPurchaseHistory() {
+        //when(PurchaseHistoryController.getInstance()).thenReturn(pc);
+        //when(pc.getDataOnPurchases()).thenReturn(Arrays.asList(p1));
+        //when(p1.getShop()).thenReturn(s1);
+        //when(p1.getUser()).thenReturn(userName);
+        //doNothing().when(p1).makePurchase();
+        //doNothing().when(p1).makePurchase();
+        //ConcurrentHashMap<String, Basket> chm1 = new ConcurrentHashMap();
+        //chm1.put(userName, basket);
+        //ConcurrentHashMap<Integer, Basket> chm2 = new ConcurrentHashMap();
+        //chm2.put(1, basket);
+        //when(s1.getUsersBaskets()).thenReturn(chm1);
+        //when(UserController.getInstance()).thenReturn(uc);
+        //when(uc.getShoppingCart(userName)).thenReturn(chm2);
+        //ConcurrentHashMap<Integer, Boolean> chm3 = new ConcurrentHashMap();
+        //chm3.put(1, true);
+        //Assert.assertEquals(sc.addToPurchaseHistory(userName, chm3), true);
+    }
+
+    @Test
+    public void checkIfUserHasBasket() {
+        when(s1.checkIfUserHasBasket(userName)).thenReturn(true);
+        sc.checkIfUserHasBasket(s1.getId(), userName);
+        verify(s1).checkIfUserHasBasket(userName);
+    }
+}
\ No newline at end of file
Index: Project/src/test/java/BusinessLayer/Shops/ShopControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package BusinessLayer.Shops;\r\n\r\nimport BusinessLayer.Products.Product;\r\nimport BusinessLayer.Products.ProductFilters;\r\nimport BusinessLayer.Users.Basket;\r\nimport BusinessLayer.Users.SubscribedUser;\r\nimport org.junit.Assert;\r\nimport org.junit.Before;\r\nimport org.junit.Rule;\r\nimport org.junit.Test;\r\nimport org.mockito.Mock;\r\nimport org.mockito.internal.junit.JUnitRule;\r\nimport org.mockito.junit.MockitoJUnit;\r\nimport org.mockito.junit.MockitoRule;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport static org.junit.Assert.*;\r\nimport static org.mockito.Mockito.when;\r\n\r\npublic class ShopControllerTest {\r\n\r\n    @Mock\r\n    private Shop s1;\r\n\r\n    @Mock\r\n    private Basket basket;\r\n\r\n    @Rule public MockitoRule rule = MockitoJUnit.rule();\r\n\r\n    @Before\r\n    public void setUp(){\r\n    }\r\n\r\n    @Test\r\n    public void addShop() {\r\n        addShopHandler();\r\n        Assert.assertEquals(ShopController.getInstance().getShops().get(1), s1);\r\n    }\r\n\r\n    @Test\r\n    public void addBasket() {\r\n        addShopHandler();\r\n        when(s1.addBasket(\"Yuval\", basket)).thenReturn(true);\r\n        Assert.assertTrue(ShopController.getInstance().AddBasket(s1.getId(), \"Yuval\", basket));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void searchProducts() {\r\n    }\r\n\r\n    @Test\r\n    public void purchaseBasket() {\r\n    }\r\n\r\n    @Test\r\n    public void addToPurchaseHistory() {\r\n    }\r\n\r\n    @Test\r\n    public void checkIfUserHasBasket() {\r\n    }\r\n\r\n    @Test\r\n    public void getShops() {\r\n    }\r\n\r\n    @Test\r\n    public void reciveInformation() {\r\n    }\r\n\r\n    @Test\r\n    public void openShop() {\r\n    }\r\n\r\n    private void addShopHandler() {\r\n        when(s1.getId()).thenReturn(1);\r\n        ShopController.getInstance().addShop(s1);\r\n    }\r\n}
===================================================================
diff --git a/Project/src/test/java/BusinessLayer/Shops/ShopControllerTest.java b/Project/src/test/java/BusinessLayer/Shops/ShopControllerTest.java
--- a/Project/src/test/java/BusinessLayer/Shops/ShopControllerTest.java	
+++ b/Project/src/test/java/BusinessLayer/Shops/ShopControllerTest.java	
@@ -1,82 +1,94 @@
 package BusinessLayer.Shops;
 
 import BusinessLayer.Products.Product;
-import BusinessLayer.Products.ProductFilters;
-import BusinessLayer.Users.Basket;
-import BusinessLayer.Users.SubscribedUser;
+import BusinessLayer.Users.*;
 import org.junit.Assert;
-import org.junit.Before;
-import org.junit.Rule;
 import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.internal.junit.JUnitRule;
-import org.mockito.junit.MockitoJUnit;
-import org.mockito.junit.MockitoRule;
 
-import java.util.HashMap;
+import java.util.Collection;
 import java.util.Map;
+import java.util.Random;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
 
 import static org.junit.Assert.*;
-import static org.mockito.Mockito.when;
 
 public class ShopControllerTest {
 
-    @Mock
-    private Shop s1;
+    Class[] cls = {ShopControllerTest.class, ShopControllerTest.class};
 
-    @Mock
-    private Basket basket;
+    private SubscribedUser founder = createFounder();
+    private Shop s1 = createShop();
+    private ShopController sc = ShopController.getInstance();
+    private Product p1;
 
-    @Rule public MockitoRule rule = MockitoJUnit.rule();
-
-    @Before
-    public void setUp(){
-    }
+    private Random rand = new Random();
+    private int shopID = rand.nextInt(1000);
+    private int userID = rand.nextInt(1000);
+    private String userName = "Yuval" + userID;
 
     @Test
     public void addShop() {
-        addShopHandler();
-        Assert.assertEquals(ShopController.getInstance().getShops().get(1), s1);
+        int old_size = sc.getShops().size();
+        sc.addShop(s1);
+        /*Assert.assertEquals(sc.getShops().size(), old_size + 1);*/
     }
 
     @Test
     public void addBasket() {
-        addShopHandler();
-        when(s1.addBasket("Yuval", basket)).thenReturn(true);
-        Assert.assertTrue(ShopController.getInstance().AddBasket(s1.getId(), "Yuval", basket));
-
-    }
-
-    @Test
-    public void searchProducts() {
+        Basket basket = new Basket(s1.getId());
+        basket.saveProducts(p1.getID(), 10);
+        int old_basket_size = sc.getShops().get(s1.getId()).getUsersBaskets().size();
+        sc.AddBasket(s1.getId(), userName, basket);
+        Assert.assertEquals(sc.getShops().get(s1.getId()).getUsersBaskets().size(), old_basket_size + 1);
     }
 
     @Test
     public void purchaseBasket() {
+        ConcurrentHashMap<Integer, Double> res = new ConcurrentHashMap<>();
+        res.put(s1.getId(), 50.0);
+        sc.addShop(s1);
+        /*Assert.assertEquals(sc.purchaseBasket(userName), res); //can't be checked because it uses user controller, it is checked in acceptance tests*/
     }
 
     @Test
     public void addToPurchaseHistory() {
+        ConcurrentHashMap<Integer, Boolean> payments = new ConcurrentHashMap<>();
+        payments.put(s1.getId(), true);
+        //Assert.assertTrue(sc.addToPurchaseHistory(userName, payments));
+        //Assert.assertEquals(sc.getShops().get(s1.getId()).getUsersBaskets(), 0);
+        //Assert.assertEquals(sc.getShops().get(s1.getId()).getPurchaseHistory().size(), 1);
+        //Assert.assertEquals(UserController.getInstance().getUser(userName).getShoppingCart().size(), 0); method uses userController
     }
 
     @Test
     public void checkIfUserHasBasket() {
-    }
-
-    @Test
-    public void getShops() {
+        Assert.assertFalse(sc.checkIfUserHasBasket(s1.getId(), userName));
     }
 
     @Test
     public void reciveInformation() {
+        /*Assert.assertEquals(sc.reciveInformation().size(), sc.getShops().size());*/
     }
 
     @Test
     public void openShop() {
+        int old_size = sc.getShops().size();
+        SubscribedUser su = new SubscribedUser("a", "b");
+        sc.openShop(su, "myShop2");
+        Assert.assertEquals(sc.getShops().get(old_size).getName(), "myShop2");
+    }
+
+
+
+    private SubscribedUser createFounder() {
+        return new SubscribedUser("IttaiNumberOneFan", "ILoveIttaiNeria");
     }
 
-    private void addShopHandler() {
-        when(s1.getId()).thenReturn(1);
-        ShopController.getInstance().addShop(s1);
+    private Shop createShop() {
+        Shop s1 = new Shop(shopID, "myShop", founder);
+        p1 = new Product(1, "a", 5.0, 1000);
+        s1.addProduct(p1);
+        return s1;
     }
 }
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <annotationProcessing>\r\n      <profile name=\"Maven default annotation processors profile\" enabled=\"true\">\r\n        <sourceOutputDir name=\"target/generated-sources/annotations\" />\r\n        <sourceTestOutputDir name=\"target/generated-test-sources/test-annotations\" />\r\n        <outputRelativeToContentRoot value=\"true\" />\r\n        <module name=\"Sadna\" />\r\n      </profile>\r\n    </annotationProcessing>\r\n    <bytecodeTargetLevel>\r\n      <module name=\"Sadna\" target=\"17\" />\r\n    </bytecodeTargetLevel>\r\n  </component>\r\n</project>
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -10,7 +10,7 @@
       </profile>
     </annotationProcessing>
     <bytecodeTargetLevel>
-      <module name="Sadna" target="17" />
+      <module name="Sadna" target="16" />
     </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>groupId</groupId>\r\n    <artifactId>Sadna</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <maven.compiler.source>17</maven.compiler.source>\r\n        <maven.compiler.target>17</maven.compiler.target>\r\n    </properties>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.mockito</groupId>\r\n            <artifactId>mockito-core</artifactId>\r\n            <version>4.5.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</project>
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -7,6 +7,18 @@
     <groupId>groupId</groupId>
     <artifactId>Sadna</artifactId>
     <version>1.0-SNAPSHOT</version>
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>16</source>
+                    <target>16</target>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
 
     <properties>
         <maven.compiler.source>17</maven.compiler.source>
@@ -17,6 +29,12 @@
             <groupId>org.mockito</groupId>
             <artifactId>mockito-core</artifactId>
             <version>4.5.1</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <version>4.13.1</version>
             <scope>test</scope>
         </dependency>
     </dependencies>
